第一步 npm install -g express-generator
第二部 express -e music (项目名)  解决本地安装express4的问题   http://blog.csdn.net/mcpang/article/details/26612865  （;C;\Users\Administrator\Desktop\桃花的在线播放器\node_modules\.bin）
第三部 cd music   ||  npm install
第四步 全局监听node  npm install -g supervisor
第五步  supervisor bin/www
---------------------------------------------------------------------------
AudioContext
一个document只有一个Audiocontext   创建 var ac = new window.AudioContext();
destination:  AudioDestinationNode对象，所有的音频输出聚集地，相当于音频的硬件，所有的AudioNode都直接或间接连接到这里
currentTime，AudioContext从创建开始到当前的时间（秒）
方法：1.decodeAudioData（arrayBuffer，succ（buffer），err）异步解码包含在arrayBuffer中的音频数据
2.createBufferSource（），创建audioBufferSourceNode对象
3.createAnalyser（），创建AnalyserNode对象
createGain（）/createGainNode（），创建GainNode对象
————————————————————————————————————
AudioBufferSourceNode 表示内存中的一段音频资源，其音频数据存在于AudioBuffer中
创建 var buffersource = ac.createBufferSource();
属性: buffer: AudioBuffer对象，表示要播放的音频资源数据。 子属性：duration，该音频资源的时长（秒） loop：是否循坏播放，默认false  onended：可绑定音频播放完毕时调用的时间处理程序
方法：start/noteOn（when=ac.currentTime，offset=0，duration=buffer.duration-offset），开始播放音频。when：何时开始播放；offset：从音频的第几秒开始播放；duration：播放几秒
stop/noteOff（when=ac.currentTime）结束播放音频
注意在图中少画了一个AudioBufferSourceNode指向AudioDestinationNode
------------------------------------------------------------------------
GainNode:改变音频音量的对象，会改变通过它的音频数据所有的sample frame的信号强度
创建 var gainNode = ac.createGain()/ac.createGainNode();
属性：gain ： AudioParem对象，通过改变其value值可以改变音频信号的强弱，默认的value属性值为1，通常最小值为0，最大值为1，其value值也可以大于1，小于0
--------------------------------------------------------------------------
AnalyserNode :音频分析对象，它能实时的分析音频资源的频域和时域，但不会对音频流做任何处理
创建 var analyser = ac.createAnalyser();
fftSize,设置FFT（FFT是离散傅里叶变换的快速算法，用于将一个信号变换到频域）值的大小，用于分析得到频域，为32-2048之间2的整数次倍，默认
为2048，实时得到的音频频域的数据个数为fftSize的一半
frequencyBinCount，FFT值得一半，即实时得到的音频频域的数据个数
getByteFrequencyData（Uint8Array）。复制音频当前的频域数据（数量是frequencyBinCount）到Uint8Array（8位无符号整型类型化数组）中